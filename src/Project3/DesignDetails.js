import React from 'react';
import RealWorldData01 from "./img/realworlddata01.png";
import RealWorldData02 from "./img/realworlddata02.png";
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { coy } from 'react-syntax-highlighter/dist/esm/styles/prism';

const codeString = `
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TrashPileGenerator : MonoBehaviour
{
    public GameObject[] trashItems;
    public Vector3 spawnArea = new Vector3(1, 2, 1);
    public Transform monthGlassContainer;
    public Transform yearGlassContainer;
    public float trashItemWeight = 100f;
    public float trashItemScale = 0.02f;
    private float weightPerTakeout = 147.7f;  // 初始外卖重量

    public void GenerateTrashPileForPeriod(int takeoutTimes, Transform container, float delay)
    {
        float totalWeight = takeoutTimes * weightPerTakeout;
        int numberOfTrashItems = Mathf.FloorToInt(totalWeight / trashItemWeight);
        if (numberOfTrashItems > 0)
        {
            StartCoroutine(GenerateTrashPileCoroutine(numberOfTrashItems, container, delay));
        }
    }

    IEnumerator GenerateTrashPileCoroutine(int trashCount, Transform container, float delay)
    {
        for (int i = 0; i < trashCount; i++)
        {
            GameObject trashItem = trashItems[Random.Range(0, trashItems.Length)];
            Vector3 spawnPosition = container.position + new Vector3(
                Random.Range(-spawnArea.x / 2, spawnArea.x / 2),
                Random.Range(spawnArea.y / 2, spawnArea.y),
                Random.Range(-spawnArea.z / 2, spawnArea.z / 2)
            );

            GameObject spawnedItem = Instantiate(trashItem, spawnPosition, Quaternion.identity, container);
            spawnedItem.transform.localScale = new Vector3(trashItemScale, trashItemScale, trashItemScale);

            yield return new WaitForSeconds(delay);
        }
    }
}
`;

const DesignDetails = () => {
  return (
    <section id="details3">
      <div className="details3-container">
        <h2 className='details3-h2'>DESIGN DETAILS</h2>
        <p className="details3-paragraph">
          Based on user research findings and comparative analyses, I flesh out the design:
        </p>
        <h2 className="details3-header">Final user flow</h2>
        <div style={{ width: '640px', height: '540px', margin: '10px', marginBottom: '40px', position: 'relative' }}>
          <iframe
            allowFullScreen
            style={{ width: '840px', height: '540px' }}
            src="https://lucid.app/documents/embedded/be40753d-0d6f-42fe-b9e9-1b1528c1781d"
            id="JgWeomgvMi1x"
            title="User Flow Diagram"
          ></iframe>
        </div>
        <h2 className="details3-header">Game Design</h2>
        <p className="details3-paragraph" style={{marginBottom: '40px'}}>
          I took inspiration from the narrative style of <a href="https://www.unep.org/news-and-stories/story/experience-your-carbon-footprint-vr" target="_blank" rel="noopener noreferrer">"Experience Your Carbon Footprint in VR"</a> for "Tide of Food Delivery Waste," using a storytelling approach to engage players by immersing them directly in the experience and making the impact of their actions more tangible.
        </p>
        <h2 className="details3-header">Data Visualization</h2>
        <p className="details3-paragraph">
          The visual format of "Tide of Food Delivery Waste" is inspired by the <a href="https://www.realworldvisuals.com/" target="_blank" rel="noopener noreferrer">"Real World Visuals"</a> project, using comparisons of waste piles or carbon emissions with reference objects to give players a clear sense of the pollution generated by food delivery.
        </p>
        <div className='RealWorldDataImg'>
          <img src={RealWorldData01} className="RealWorldData"></img>
          <img src={RealWorldData02} className="RealWorldData"></img>
        </div>
        <p className="details3-paragraph">
          I used C# to achieve the trash pile effect. The script calculates total waste based on user-input orders and uses a coroutine to randomly spawn trash items, dynamically visualizing the waste amount based on player choices.
        </p>
        <div className='codecontainer'>
          <SyntaxHighlighter language="csharp" style={coy}>
            {codeString}
          </SyntaxHighlighter>
        </div>
      </div>
    </section>
  );
};

export default DesignDetails;

